<?php
// $Id$



/**
* @author Martin Scholz
*/
function wisski_textanly_menu () {

  $items = array();
  $items['wisski/textanly/analyse'] = array (
    'title' => '',
    'page callback' => 'wisski_textanly_ws_analyse',
    'type' => MENU_CALLBACK,
    'access arguments' => array('wisski use editor'),
  );
  /* admin settings */
  $items['admin/settings/wisski/text/anly'] = array(
      'title' => 'Automatic text analysis',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_textanly_admin_list'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_textanly.admin.inc',
      );
  $items['admin/settings/wisski/text/anly/list'] = array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_textanly_admin_list'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_textanly.admin.inc',
      );
  $items['admin/settings/wisski/text/anly/add'] = array(
      'title' => 'Add',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_textanly_admin_add'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_textanly.admin.inc',
      );
  $items['admin/settings/wisski/text/anly/preprocessor'] = array(
      'title' => 'Preprocessor',
      'type' => MENU_LOCAL_TASK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_textanly_admin_preprocessor'),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_textanly.admin.inc',
      );
  foreach (wisski_textanly_get_types() as $type => $info) {
    if ($type == 'local') continue;
    $items['admin/settings/wisski/text/anly/add/' . $type] = array(
        'title' => 'Add ' . $info['name'],
        'type' => MENU_LOCAL_TASK,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('wisski_textanly_admin_edit', NULL, $type),
        'access arguments' => array('wisski administrate page'),
        'file' => 'wisski_textanly.admin.inc',
        );
  }
  $items['admin/settings/wisski/text/anly/%/edit'] = array(
      'title' => 'Edit',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_textanly_admin_edit', 4),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_textanly.admin.inc',
      );
  $items['admin/settings/wisski/text/anly/%/delete'] = array(
      'title' => 'Delete',
      'type' => MENU_CALLBACK,
      'page callback' => 'wisski_textanly_admin_delete',
      'page arguments' => array(4),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_textanly.admin.inc',
      );
  $items['wisski/textanly/js/edit'] = array(
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wisski_textanly_admin_edit_js', 3),
      'access arguments' => array('wisski administrate page'),
      'file' => 'wisski_textanly.admin.inc',
      );
  return $items;

}




/** Analyses a HTML fragment
*
* @parameter $text the html fragment
* @parameter $lang the default document language
* @parameter $profile the profile of the analysis configuration
*   (this currentyl is not supported by the admin interface)
*
* @return a list of proposed annotations
*
* @author Martin Scholz
*
*/
function wisski_textanly_analyse_xhtml_fragment($text, $lang = '', $profile = 'default') {
  include_once(dirname(__FILE__) . '/wisski_textanly.analyse.inc');
  return _wisski_textanly_analyse_xhtml_fragment($text, $lang, $profile);
}


/** Takes a fragment of HTML and extracts text information
*
* @parameter $text the HTML fragment
* @parameter $default_lang the document defualt language

* @return an array of text information containing
* - text: The pure text contents.
    UTF8 encoded; use multibyte methods mb_* or //u flag in preg_*!
    Some HTML tags are replaces by a whitespace character to separate words
    (e.g. <br/>, <p>, ...)
* - char_shifts: due to ws-insertion for tags, the (P)CDATA character position
    in the HTML doc may vary from the position in pure text string.
    This is an assoc array with pairs
    <#shifted chars> => <max text pos with that shift (excluded)>
    e.g. an array(0 => 12, 1 => 14, 2 => 34) says that all char positions until
    excluding char 12 have to be shifted left 0, until excluding char 14
    shifted left 1, etc. to obtain the char position in the HTML
* - lang_ranges: an array with keys being language labels and values being each
*   a list of text intervals that are marked in this language.
*   Intervals are encoded as array(start, end). E.g.
*   array(
        'en' => array(array(10, 20)),
        'de' => array(array(0, 10), array(20, 30)))
* - annos: an array of annotations found in the text
*
* @author Martin Scholz
*/
function wisski_textanly_strip_tags($xhtml, $default_lang = '') {
  include_once(dirname(__FILE__) . '/wisski_textanly.inc');
  return _wisski_textanly_strip_tags($xhtml, $default_lang);
}


/** generate triples from a HTML fragment
*
* @parameter $xhtml the html fragment
* @parameter $doc_uri the instance URI of this document
* @parameter $params additional parameters for triple generation
*
* @return a list of triples in ARC2 structure
*/
function wisski_textanly_triplify_xhtml($xhtml, $doc_uri, $params = array()) {
  include_once(dirname(__FILE__) . '/wisski_textanly.inc');
  return _wisski_textanly_triplify_xhtml($xhtml, $doc_uri, $params);
}


/** Get a information about available analysis component types.
* This calls hook_wisski_textanly()
*
* @return if $type and $col is set, the value of key $col for type $type.
*   If only $type is set, return all info about type $type.
*   If $type is NULL, return info about all available types.
*
* @author Martin Scholz
*/
function wisski_textanly_get_types($type = NULL, $col = NULL) {
  include_once('wisski_textanly.inc');
  return _wisski_textanly_get_types($type, $col);
}

/** Get one or multiple analysis step objects from db
*
* @return If $aid and $col is set, the value of key $col for step with id $aid.
*   If only $aid is set, return step object with id $aid.
*   If $aid is NULL, return all step objects sorted by weight.
*
* @author Martin Scholz
*
*/
function wisski_textanly_get($aid = NULL, $col = NULL, $refresh = FALSE) {
  include_once('wisski_textanly.inc');
  return _wisski_textanly_get($aid, $col, $refresh);
}


/** Save step object to db
* $ap may be changed, e.g. an id may be added
*
* @author Martin Scholz
*/
function wisski_textanly_save(&$ap) {
  include_once('wisski_textanly.inc');
  return _wisski_textanly_save($ap);
}

/** delete a step object
*
* @author Martin Scholz
*/
function wisski_textanly_delete($aid) {
  db_query('DELETE FROM {wisski_textanly_pipes} WHERE aid = %d', $aid);
  return TRUE;
}


/** Implementation of hook_wisski_textanly
*
* With this hook modules can provide their own analysis component types.
*
* @parameter $op Operation may be
* - list: get a list of defined types with info.
* - settings: TODO: what does this do?
* - analyse: analyse a piece of text
* - operations: list available admin operations (for display in the admin list tab)
* - edit: the form for adding/editing a step
* - validate: validate the edit form
* - submit: submit the edit form
*
* @parameter $ap the analysis step object; ignorable when $op is 'list'
*
* The other parameters depend on $op:
* - list: no params
* - settings: (no info)
* - analyse:
*   - $type: the step type
*   - $profile: the profile to be applied
*   - $lang: the text language
*   - $text: the text to be analysed
*   - $tokens: the text as sequence of tokens
*     Tokens are arrays of form
*     array(<surface>, <start pos>, <end pos>)
*     Keys 'lemma' and 'pos' may be set
*     if a lemma and part-of-speech info is available.
*   - $annos: already set/found annotations
*   - $settings: settings for the step
* - operations, edit, validate, submit:
*   - $ap: the step object
*
* @return depends on $op
* - list: get a list of defined types with info.
*   keys are type id, the value is an info array that contains
*   - title: the label of the type
*   - description: a description of the type
*   - langs: a list of languages this component type may be applied to.
*     A single entry '' means all languages.
*   - multiple: if multiple steps of this component type may be instanciated
* - settings: TODO: what does this do?
* - analyse: an array of annotations
* - operations: an assoc array of admin operations for this type mapped to
*   their URL callbacks
* - edit: the form array
* - validate, submit: nothing
*
* @author Martin Scholz
*/
function wisski_textanly_wisski_textanly($op, $ap = NULL) {

  switch ($op) {
    case 'list':
      return array(
        'wisski_textanly_vocab' => array(
          'title' => t('Detection of Vocabulary Entries'),
          'description' => t('Detection of mentions of vocabulary entries.'),
          'langs' => array(''),
          'multiple' => FALSE,
        ),
        'wisski_textanly_person' => array(
          'title' => t('Detection of Person Names'),
          'description' => t('Detection of person names'),
          'langs' => array(''),
          'multiple' => FALSE,
        ),
        'wisski_textanly_datetime' => array(
          'title' => t('Detection of Dates & Times'),
          'description' => t('Detection of statements about temporal location'),
          'langs' => array('de', 'en'),
          'multiple' => FALSE,
        ),
        'wisski_textanly_regexp' => array(
          'title' => t('Regular Expression Pattern'),
          'description' => t('Detection of patterns withs regular expressions'),
          'langs' => array(''),
          'multiple' => TRUE,
        ),
      );

    case 'settings':
      
      list(, $id, $profile, $lang, $settings) = func_get_args();
      $form = array();
      return $form;

    case 'analyse':
      
      list(, $id, $profile, $lang, $text, $tokens, $annos, $settings) = func_get_args();

      switch ($id) {
        case 'wisski_textanly_vocab':
          include_once(dirname(__FILE__) . '/wisski_textanly.analyse.inc');
          return _wisski_textanly_analyse_vocab($profile, $lang, $text, $tokens, $annos, $settings);

        case 'wisski_textanly_person':
          include_once(dirname(__FILE__) . '/wisski_textanly.analyse.inc');
          return _wisski_textanly_analyse_automaton($profile, $lang, $text, $tokens, $annos, $settings);
  
        case 'wisski_textanly_datetime':
          include_once(dirname(__FILE__) . '/wisski_textanly.analyse.inc');
          return _wisski_textanly_analyse_datetime($profile, $lang, $text, $tokens, $annos, $settings);
          
        case 'wisski_textanly_regexp':
          include_once(dirname(__FILE__) . '/wisski_textanly.analyse.inc');
          return _wisski_textanly_analyse_regexp($profile, $lang, $text, $tokens, $annos, $settings);
          
      }
      
    default:
	
		include_once('wisski_textanly.inc');
		if (function_exists('wisski_textanly_wisski_textanly_' . $ap->type)) {
		  return call_user_func('wisski_textanly_wisski_textanly_' . $ap->type, $op, $ap);
		} else {
		  return NULL;
		}

   

  }

}


/**Get the prefix for creating new instance URIs
* TODO: Should be moved to module wisski
*
* @author Martin Scholz
*/
function wisski_instance_prefix() {
  global $base_root, $base_path;
  return $base_root . $base_path . "content/";
}


/** hook_theme implementation for theming the table in admin list tab
*
* @author Florian Wittmann
*/
function wisski_textanly_theme() {
  return array(
    'wisski_textanly_admin_list' => array(
      'file' => 'wisski_textanly.admin.inc',
      'arguments' => array('form' => NULL),
    ),
  );
}



/* Web service callback: Analyse a text and return a json object
* containing proposed annotations.
*
* Supports only parameter 'text' which contains the text to be analysed
*
* @author Martin Scholz
*
*/
function wisski_textanly_ws_analyse() {
  
  //TODO uncomment  drupal_set_header('Content-Type: application/json; charset=utf-8');
  
  // we use the textedit module to read the post parameters
  $q = (object) array('rev' => NULL, 'text' => NULL, 'annos' => array());
  module_load_include('inc', 'wisski_textedit', 'wisski_textedit.ws');
  _wisski_textedit_ws_query_params($q);
  
  if ($q->text === NULL) {
    // found no text parameter
    drupal_set_header('HTTP/1.1 400 Bad Request');
    print json_encode(array("error" => "no text to analyse"));
    return;    
  }
  
  $annos = wisski_textanly_analyse_xhtml_fragment($q->text);
  
  // Print result
  print json_encode(array('rev' => $q->rev, "annos" => $annos));
  return;
  
}


/* implementation of hook_wysiwyg_plugin
* Provide information about plugins
*
* @author Martin Scholz
*
*/
function wisski_textanly_wysiwyg_plugin($editor, $version) {
  if ($editor != 'tinymce') return;
  
  $path_wisski_textedit = drupal_get_path('module', 'wisski_textanly');

  global $base_root, $base_path;

  $plugins = array(
      // sends the text to server and retrieves automatically generated annotations 
      'wisskiSend' => array(
          'path' => $path_wisski_textedit . '/editor_plugin.js',
          'extensions' => array('wisskiSend' => t('WissKI Send')),
          'buttons' => array('wisski_autosend' => t('Wisski Toggle Autosend'), 'wisski_manualsend' => t('Wisski Manual Send')),
          'options' => array(
            'wisskiSend_autosend' => variable_get('wisski_textanly_autosend', FALSE) ? 'true' : 'false',
            'wisskiSend_interval' => variable_get('wisski_textanly_send_interval', 5000),
            'wisskiSend_url' => $base_root . $base_path . 'wisski/textanly/analyse',
            ),
          'load' => TRUE,
          ),
      );

  return $plugins;
}

